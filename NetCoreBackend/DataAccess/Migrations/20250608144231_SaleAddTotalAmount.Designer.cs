// <auto-generated />
using System;
using DataAccess.Concrate.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(FcdAccContext))]
    [Migration("20250608144231_SaleAddTotalAmount")]
    partial class SaleAddTotalAmount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrate.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPostable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NormalBalance")
                        .HasColumnType("int");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 1,
                            Code = "1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kasa, bankalar ve diğer hazır değerleri içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Paraja dhe ekuivalentët e parasë (Nakit ve Nakit Benzerleri)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 1,
                            Code = "1050",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bir yıldan kısa sürede nakde çevrilecek veya alınıp satılacak finansal yatırımları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Investimet financiare afatshkurtra (Kısa Vadeli Finansal Yatırımlar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 3,
                            AccountType = 1,
                            Code = "1100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin ticari faaliyetlerinden kaynaklanan ve diğer çeşitli kısa vadeli alacaklarını içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Llogaritë e arkëtueshme tregtare dhe të tjera (Ticari ve Diğer Alacaklar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 4,
                            AccountType = 1,
                            Code = "1150",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Satılmak veya üretimde kullanılmak üzere elde tutulan ticari mallar, mamuller, yarı mamuller, hammaddeler vb. varlıkları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Stoget (Stoklar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 5,
                            AccountType = 1,
                            Code = "1200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yukarıdaki gruplara girmeyen diğer dönen varlık kalemlerini içerir (Gelir tahakkukları, peşin ödenmiş giderler vb.).",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pasuritë e tjera afatshkurtra (Diğer Dönen Varlıklar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 6,
                            AccountType = 1,
                            Code = "1300",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Başka işletmelerde önemli etki sahibi olunan uzun vadeli iştirak yatırımlarını içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Investimet në pjesëmarrje (İştiraklerdeki Yatırımlar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 7,
                            AccountType = 1,
                            Code = "1350",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Başka işletmeler üzerinde kontrol gücü sahibi olunan uzun vadeli bağlı ortaklık yatırımlarını içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Investimet në filiale (Bağlı Ortaklıklardaki Yatırımlar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 8,
                            AccountType = 1,
                            Code = "1400",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bir yıldan uzun süreyle elde tutulacak diğer finansal yatırımları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Investimet financiare afatgjata (Uzun Vadeli Finansal Yatırımlar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 9,
                            AccountType = 1,
                            Code = "1450",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletme faaliyetlerinde kullanılmak üzere elde tutulan arsa, bina, makine, teçhizat gibi maddi duran varlıkları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Prona, pajisjet dhe impiantet (Maddi Duran Varlıklar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 10,
                            AccountType = 1,
                            Code = "1500",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kira geliri elde etmek veya değer artışı sağlamak amacıyla elde tutulan gayrimenkulleri içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Prona investuese (Yatırım Amaçlı Gayrimenkuller)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 11,
                            AccountType = 1,
                            Code = "1550",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Henüz tamamlanmamış ve aktifleştirilmemiş maddi duran varlık yatırımlarını içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Investimet në vijim (Yapılmakta Olan Yatırımlar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 12,
                            AccountType = 1,
                            Code = "1600",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fiziksel varlığı olmayan ancak işletmeye fayda sağlayan haklar, şerefiye, patent gibi varlıkları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pasuritë e paprekshme (Maddi Olmayan Duran Varlıklar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 13,
                            AccountType = 1,
                            Code = "1650",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gelecekte vergi matrahından indirilebilecek veya daha az vergi ödenmesini sağlayacak unsurlardan kaynaklanan varlıkları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pasuritë e shtyra tatimore (Ertelenmiş Vergi Varlıkları)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 14,
                            AccountType = 1,
                            Code = "1700",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yukarıdaki duran varlık gruarına girmeyen diğer uzun vadeli varlıkları içerir.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pasuritë e tjera afatgjata (Diğer Uzun Vadeli Varlıklar)",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 15,
                            AccountType = 2,
                            Code = "2000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Banka Kredileri (Nakit Avansları) / Bank Overdraft",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mbitërheqja bankare",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 16,
                            AccountType = 2,
                            Code = "2050",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ticari ve Diğer Borçlar (Trade and Other Payables)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Llogaritë e pagueshme tregtare dhe të tjera",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 17,
                            AccountType = 2,
                            Code = "2100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Krediler ve Borçlar, Kısa Vadeli Kısım (Loans and Borrowings, Short-term Portion)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kreditë dhe huatë, pjesa afatshkurtër",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 18,
                            AccountType = 2,
                            Code = "2150",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ödenecek Faiz (Interest Payable)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Interesi i pagueshëm",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 19,
                            AccountType = 2,
                            Code = "2200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ödenecek Kurumlar Vergisi (Income Tax Payable)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tatimin në fitim i pagueshëm",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 20,
                            AccountType = 2,
                            Code = "2250",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kısa Vadeli Karşılıklar (Short-term Provisions)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Provizionet afatshkurta",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 21,
                            AccountType = 2,
                            Code = "2300",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Finansal Kiralama Yükümlülükleri, Kısa Vadeli Kısım (Lease Liabilities, Short-term Portion)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet ndaj lizingut, pjesa afatshkurtër",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 22,
                            AccountType = 2,
                            Code = "2350",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diğer Kısa Vadeli Yükümlülükler (Other Short-term Liabilities)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet e tjera afatshkurtra",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 23,
                            AccountType = 2,
                            Code = "2400",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Krediler ve Borçlar, Uzun Vadeli Kısım (Loans and Borrowings, Long-term Portion)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kreditë dhe huatë, pjesa afatgjatë",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 24,
                            AccountType = 2,
                            Code = "2450",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Uzun Vadeli Karşılıklar (Long-term Provisions)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Provizionet afatgjata",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 25,
                            AccountType = 2,
                            Code = "2500",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Finansal Kiralama Yükümlülükleri, Uzun Vadeli Kısım (Lease Liabilities, Long-term Portion)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet ndaj lizingut, pjesa afatgjatë",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 26,
                            AccountType = 2,
                            Code = "2550",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ertelenmiş Vergi Yükümlülükleri (Deferred Tax Liabilities)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet e shtyra tatimore",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 27,
                            AccountType = 2,
                            Code = "2600",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diğer Uzun Vadeli Yükümlülükler (Other Long-term Liabilities)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet e tjera afatgjata",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 28,
                            AccountType = 3,
                            Code = "3000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sermaye (Share Capital)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kapitali aksionar",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 29,
                            AccountType = 3,
                            Code = "3100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Birikmiş Karlar (Retained Earnings)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Fitimet e mbajtura",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 30,
                            AccountType = 3,
                            Code = "3200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diğer Yedekler (Other Reserves)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Rezervat e tjera",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 31,
                            AccountType = 4,
                            Code = "4000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gelirler / Hasılat (Revenue)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Të Hyrat",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 32,
                            AccountType = 4,
                            Code = "4100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diğer Gelirler (Other Income)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Të ardhura tjera",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 33,
                            AccountType = 4,
                            Code = "4200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Finansal Gelirler (Financial Income)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Të ardhurat financiare",
                            NormalBalance = 2
                        },
                        new
                        {
                            Id = 34,
                            AccountType = 5,
                            Code = "5000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Satışların Maliyeti (Cost of Sales)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kostoja e shitjes",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 35,
                            AccountType = 5,
                            Code = "5100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dağıtım Giderleri (Distribution Expenses)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shpenzimet e shpërndarjes",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 36,
                            AccountType = 5,
                            Code = "5200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İdari Giderler (Administrative Expenses)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shpenzimet administrative",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 37,
                            AccountType = 5,
                            Code = "5300",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diğer Giderler (Other Expenses)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shpenzimet e tjera",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 38,
                            AccountType = 5,
                            Code = "5400",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Finansal Giderler (Financial Expenses)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shpenzimet financiare",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 39,
                            AccountType = 5,
                            Code = "5500",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kurumlar Vergisi Gideri (Income Tax Expense)",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shpenzimet e tatimit në fitim",
                            NormalBalance = 1
                        },
                        new
                        {
                            Id = 40,
                            AccountType = 1,
                            Code = "1000.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kasada bulunan nakit para.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kasë (Kasa)",
                            NormalBalance = 1,
                            ParentAccountId = 1
                        },
                        new
                        {
                            Id = 41,
                            AccountType = 1,
                            Code = "1000.2000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Banka hesapları.",
                            IsActive = true,
                            IsPostable = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Banka (Banka)",
                            NormalBalance = 1,
                            ParentAccountId = 1
                        },
                        new
                        {
                            Id = 42,
                            AccountType = 1,
                            Code = "1100.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin çeşitli faaliyetlerinden doğan alacakları.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Llogaritë e arkëtueshme (Alacak Hesapları)",
                            NormalBalance = 1,
                            ParentAccountId = 3
                        },
                        new
                        {
                            Id = 43,
                            AccountType = 1,
                            Code = "1150.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Satın alınıp üzerinde değişiklik yapılmadan satılan mallar.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mallra Tregtare (Ticari Mallar)",
                            NormalBalance = 1,
                            ParentAccountId = 4
                        },
                        new
                        {
                            Id = 44,
                            AccountType = 1,
                            Code = "1150.2000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Üretimde kullanılacak temel hammaddeler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Lëndë e parë (Hammadde)",
                            NormalBalance = 1,
                            ParentAccountId = 4
                        },
                        new
                        {
                            Id = 45,
                            AccountType = 1,
                            Code = "1150.3000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Henüz üretim süreci tamamlanmamış ürünler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Produkte në proces (Yarı Mamuller)",
                            NormalBalance = 1,
                            ParentAccountId = 4
                        },
                        new
                        {
                            Id = 46,
                            AccountType = 1,
                            Code = "1150.4000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Üretim süreci tamamlanmış, satışa hazır ürünler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Produkte të gatshme (Mamuller)",
                            NormalBalance = 1,
                            ParentAccountId = 4
                        },
                        new
                        {
                            Id = 47,
                            AccountType = 1,
                            Code = "1200.7008",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "%8 oranında alım ve giderler üzerinden hesaplanan ve indirilecek KDV.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "TVSH e zbritshme 8% (İndirilecek KDV %8)",
                            NormalBalance = 1,
                            ParentAccountId = 5
                        },
                        new
                        {
                            Id = 48,
                            AccountType = 1,
                            Code = "1200.7018",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "%18 oranında alım ve giderler üzerinden hesaplanan ve indirilecek KDV.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "TVSH e zbritshme 18% (İndirilecek KDV %18)",
                            NormalBalance = 1,
                            ParentAccountId = 5
                        },
                        new
                        {
                            Id = 49,
                            AccountType = 1,
                            Code = "1450.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletme faaliyetlerinde kullanılan demirbaşlar, makine ve teçhizat.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Nënshkrime dhe pajisje (Demirbaşlar ve Tesisat)",
                            NormalBalance = 1,
                            ParentAccountId = 9
                        },
                        new
                        {
                            Id = 50,
                            AccountType = 6,
                            Code = "1450.6000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pajisje ve demirbaşlar için ayrılan birikmiş amortisman.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Amortizimi i pajisjeve (Ekipman Amortismanı)",
                            NormalBalance = 2,
                            ParentAccountId = 9
                        },
                        new
                        {
                            Id = 51,
                            AccountType = 2,
                            Code = "2050.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin ticari faaliyetlerinden doğan borçları.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Furnitorët (Tedarikçiler)",
                            NormalBalance = 2,
                            ParentAccountId = 16
                        },
                        new
                        {
                            Id = 52,
                            AccountType = 2,
                            Code = "2200.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin kazançları üzerinden ödenecek kurumlar vergisi.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tatimi mbi fitimin (Kurumlar Vergisi)",
                            NormalBalance = 2,
                            ParentAccountId = 19
                        },
                        new
                        {
                            Id = 53,
                            AccountType = 2,
                            Code = "2350.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Finansal kiralama sözleşmelerinden doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Qira (Kira Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 54,
                            AccountType = 2,
                            Code = "2350.1100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Finansal kiralama sözleşmelerinden doğan vergi yükümlülükleri.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet Tatim mbi Qirën (Kira Vergisi Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 55,
                            AccountType = 2,
                            Code = "2350.2000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin personeline ödenecek ücret ve maaşlardan doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Paga ndaj Personelit (Personel Ücret Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 56,
                            AccountType = 2,
                            Code = "2350.2100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin personeline ödenecek ücret ve maaşlardan doğan vergi yükümlülükleri.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Tatimin mbi Paga (Ücret Vergisi Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 57,
                            AccountType = 2,
                            Code = "2350.2200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin sosyal güvenlik primlerinden doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Kontributer (Sosyal Güvenlik Prim Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 58,
                            AccountType = 2,
                            Code = "2350.7000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin gümrük vergilerinden doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet per Dogan (Gümrük Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 59,
                            AccountType = 2,
                            Code = "2350.7008",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin gümrük vergilerinden doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Doganë TVSH 8% (Gümrük KDV Yükümlülükleri %8)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 60,
                            AccountType = 2,
                            Code = "2350.7018",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin gümrük vergilerinden doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Doganë TVSH 18% (Gümrük KDV Yükümlülükleri %18)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 61,
                            AccountType = 2,
                            Code = "2350.7100",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin akçiz vergilerinden doğan yükümlülükler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet per Akciza (ÖTV Yükümlülükleri)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 62,
                            AccountType = 2,
                            Code = "2350.6218",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin KDV yükümlülükleri.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Llogaritje TVSH 18% (KDV Hesap Yükümlülükleri %18)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 63,
                            AccountType = 2,
                            Code = "2350.6208",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin KDV yükümlülükleri.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për Llogaritje TVSH 8% (KDV Hesap Yükümlülükleri %8)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 64,
                            AccountType = 2,
                            Code = "2350.6200",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin KDV yükümlülükleri.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Detyrimet për TVSH 0% (KDV Hesap Yükümlülükleri %0)",
                            NormalBalance = 2,
                            ParentAccountId = 22
                        },
                        new
                        {
                            Id = 65,
                            AccountType = 3,
                            Code = "3000.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin kuruluşunda veya sonraki sermaye artırımlarında ortaklar tarafından taahhüt edilen ve ödenen sermaye tutarı.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kapitali Fillestar (Başlangıç Sermayesi)",
                            NormalBalance = 2,
                            ParentAccountId = 28
                        },
                        new
                        {
                            Id = 66,
                            AccountType = 3,
                            Code = "3100.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin içinde bulunulan hesap dönemine ait net kar veya zarar tutarı. Yıl sonunda bu hesap kapanarak birikmiş karlara veya zararlara aktarılır.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Fitimi/Humbja e Vitit Rrjedhës (Bu Yılın Karı/Zararı)",
                            NormalBalance = 2,
                            ParentAccountId = 29
                        },
                        new
                        {
                            Id = 67,
                            AccountType = 3,
                            Code = "3000.1500",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İşletmenin önceki hesap dönemlerinden devreden ve henüz dağıtılmamış veya kapatılmamış birikmiş kar veya zarar tutarları.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Fitimet/Humbjet e Mbartura (Geçmiş Yıllar Karları/Zararları)",
                            NormalBalance = 2,
                            ParentAccountId = 29
                        },
                        new
                        {
                            Id = 68,
                            AccountType = 4,
                            Code = "4000.1000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ticari malların satışından elde edilen gelirler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Të ardhura nga shitja e mallrave (Ticari Mal Satış Gelirleri)",
                            NormalBalance = 2,
                            ParentAccountId = 31
                        },
                        new
                        {
                            Id = 69,
                            AccountType = 4,
                            Code = "4000.2000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sunulan hizmetlerden elde edilen gelirler.",
                            IsActive = true,
                            IsPostable = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Të ardhura nga ofrimi i shërbimeve (Hizmet Satış Gelirleri)",
                            NormalBalance = 2,
                            ParentAccountId = 31
                        });
                });

            modelBuilder.Entity("Entities.Concrate.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Entities.Concrate.AddressPartner", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("AddressId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("AddressPartners");
                });

            modelBuilder.Entity("Entities.Concrate.AddressWarehouse", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("AddressId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("AddressWarehouses");
                });

            modelBuilder.Entity("Entities.Concrate.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ziraat Bankası"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "TEB"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Raifaisen Bank"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Procredit Bank"
                        });
                });

            modelBuilder.Entity("Entities.Concrate.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("BankId1")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BankId1");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Entities.Concrate.BankAccountCompany", b =>
                {
                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("BankAccountId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BankAccountCompanies");
                });

            modelBuilder.Entity("Entities.Concrate.BankAccountPartner", b =>
                {
                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("BankAccountId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("BankAccountPartners");
                });

            modelBuilder.Entity("Entities.Concrate.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Barcodes", null, t =>
                        {
                            t.HasCheckConstraint("CK_Barcodes_Id_Positive", "\"Id\" > 0");
                        });
                });

            modelBuilder.Entity("Entities.Concrate.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Concrate.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Period")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TradeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UidNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Entities.Concrate.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Entities.Concrate.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Entities.Concrate.ContactPartner", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("ContactId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("ContactPartners");
                });

            modelBuilder.Entity("Entities.Concrate.ContactWarehouse", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("ContactId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ContactWarehouses");
                });

            modelBuilder.Entity("Entities.Concrate.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "EUR",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Euro"
                        },
                        new
                        {
                            Id = 2,
                            Code = "USD",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "US Dollar"
                        },
                        new
                        {
                            Id = 3,
                            Code = "ALL",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Albanian Lek"
                        });
                });

            modelBuilder.Entity("Entities.Concrate.Ledger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("DocumentType")
                        .HasColumnType("smallint")
                        .HasComment("1=PurchaseInvoice, 2=SalesInvoice, 3=Payment, 4=Receipt, 5=Journal");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("Entities.Concrate.LedgerEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Credit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Debit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<int>("LineNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("LedgerEntries");
                });

            modelBuilder.Entity("Entities.Concrate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CustomsTaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ExciseTaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseAccountId")
                        .HasColumnType("int");

                    b.Property<int>("SaleAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("SaleAccountId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("VatId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.Concrate.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Entities.Concrate.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("Side")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CashPaymentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ImportPartnerDocDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImportPartnerDocNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("VendorAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("VendorAccountId");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoiceExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountFc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CashPaymentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PartnerInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartnerInvoiceNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("RevaluationAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("VendorAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("VendorAccountId");

                    b.ToTable("PurchaseInvoiceExpenses");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CustomsAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CustomsRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ExciseTaxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ExciseTaxRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RevaluationAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatTaxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("VatId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("PurchaseInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.SaleInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CashPaymentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWholeSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("SaleInvoiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("SaleInvoices");
                });

            modelBuilder.Entity("Entities.Concrate.SaleInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DiscountRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("SaleAccountId")
                        .HasColumnType("int");

                    b.Property<int>("SaleInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleAccountId");

                    b.HasIndex("SaleInvoiceId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("VatId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SaleInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "AD",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Adet"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "KG",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kilogram"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "LT",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Litre"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "MT",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Metre"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "PK",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Paket"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "KT",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kutu"
                        });
                });

            modelBuilder.Entity("Entities.Concrate.Vat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Vats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDefault = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "TVSH %0",
                            Rate = 0f
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDefault = false,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "TVSH %8",
                            Rate = 8f
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDefault = true,
                            Modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "TVSH %18",
                            Rate = 18f
                        });
                });

            modelBuilder.Entity("Entities.Concrate.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId1");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BusinessPartnerType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartnerType")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ProductDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDocuments");
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Entities.Concrate.Account", b =>
                {
                    b.HasOne("Entities.Concrate.Account", "ParentAccount")
                        .WithMany("Children")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("Entities.Concrate.AddressPartner", b =>
                {
                    b.HasOne("Entities.Concrate.Address", "Address")
                        .WithMany("AddressPartners")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Partner", "Partner")
                        .WithMany("AddressPartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Entities.Concrate.AddressWarehouse", b =>
                {
                    b.HasOne("Entities.Concrate.Address", "Address")
                        .WithMany("AddressWarehouses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Warehouse", "Warehouse")
                        .WithMany("AddressWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Concrate.BankAccount", b =>
                {
                    b.HasOne("Entities.Concrate.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Bank", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId1");

                    b.HasOne("Entities.Concrate.Currency", "Currency")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Entities.Concrate.BankAccountCompany", b =>
                {
                    b.HasOne("Entities.Concrate.BankAccount", "BankAccount")
                        .WithMany("BankAccountCompanies")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Company", "Company")
                        .WithMany("BankAccountCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Entities.Concrate.BankAccountPartner", b =>
                {
                    b.HasOne("Entities.Concrate.BankAccount", "BankAccount")
                        .WithMany("BankAccountPartners")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Partner", "Partner")
                        .WithMany("BankAccountPartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Entities.Concrate.Barcode", b =>
                {
                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("Barcodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrate.ContactDetail", b =>
                {
                    b.HasOne("Entities.Concrate.Contact", "Contact")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Entities.Concrate.ContactPartner", b =>
                {
                    b.HasOne("Entities.Concrate.Contact", "Contact")
                        .WithMany("ContactPartners")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Partner", "Partner")
                        .WithMany("ContactPartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Entities.Concrate.ContactWarehouse", b =>
                {
                    b.HasOne("Entities.Concrate.Contact", "Contact")
                        .WithMany("ContactWarehouses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Warehouse", "Warehouse")
                        .WithMany("ContactWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Concrate.LedgerEntry", b =>
                {
                    b.HasOne("Entities.Concrate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Account", null)
                        .WithMany("LedgerEntries")
                        .HasForeignKey("AccountId1");

                    b.HasOne("Entities.Concrate.Currency", null)
                        .WithMany("LedgerEntries")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Entities.Concrate.Ledger", "Ledger")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Partner", "Partner")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Ledger");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Entities.Concrate.Product", b =>
                {
                    b.HasOne("Entities.Concrate.Account", "PurchaseAccount")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Account", "SaleAccount")
                        .WithMany("SaleProducts")
                        .HasForeignKey("SaleAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Vat", "Vat")
                        .WithMany("Products")
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseAccount");

                    b.Navigation("SaleAccount");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Entities.Concrate.ProductCategory", b =>
                {
                    b.HasOne("Entities.Concrate.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrate.ProductPrice", b =>
                {
                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoice", b =>
                {
                    b.HasOne("Entities.Concrate.Currency", "Currency")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Ledger", "Ledger")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Partner", "Partner")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Account", "VendorAccount")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("VendorAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Ledger");

                    b.Navigation("Partner");

                    b.Navigation("VendorAccount");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoiceExpense", b =>
                {
                    b.HasOne("Partner", "Partner")
                        .WithMany("PurchaseInvoiceExpenses")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceExpenses")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Account", "VendorAccount")
                        .WithMany("PurchaseInvoiceExpenses")
                        .HasForeignKey("VendorAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("VendorAccount");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoiceLine", b =>
                {
                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Account", "PurchaseAccount")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("PurchaseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Vat", "Vat")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Warehouse", "Warehouse")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseAccount");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("Vat");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Concrate.SaleInvoice", b =>
                {
                    b.HasOne("Entities.Concrate.Account", "CustomerAccount")
                        .WithMany("SaleInvoices")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Ledger", "Ledger")
                        .WithMany("SaleInvoices")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Partner", "Partner")
                        .WithMany("SaleInvoices")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerAccount");

                    b.Navigation("Ledger");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Entities.Concrate.SaleInvoiceLine", b =>
                {
                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("SaleInvoiceLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Account", "SaleAccount")
                        .WithMany("SaleInvoiceLines")
                        .HasForeignKey("SaleAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.SaleInvoice", "SaleInvoice")
                        .WithMany("SaleInvoiceLines")
                        .HasForeignKey("SaleInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("SaleInvoiceLines")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Vat", "Vat")
                        .WithMany("SaleInvoiceLines")
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Warehouse", "Warehouse")
                        .WithMany("SaleInvoiceLines")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleAccount");

                    b.Navigation("SaleInvoice");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("Vat");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Concrate.Warehouse", b =>
                {
                    b.HasOne("Entities.Concrate.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrate.Company", null)
                        .WithMany("Warehouses")
                        .HasForeignKey("CompanyId1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProductDocument", b =>
                {
                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("Entities.Concrate.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrate.Account", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LedgerEntries");

                    b.Navigation("PurchaseInvoiceExpenses");

                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseProducts");

                    b.Navigation("SaleInvoiceLines");

                    b.Navigation("SaleInvoices");

                    b.Navigation("SaleProducts");
                });

            modelBuilder.Entity("Entities.Concrate.Address", b =>
                {
                    b.Navigation("AddressPartners");

                    b.Navigation("AddressWarehouses");
                });

            modelBuilder.Entity("Entities.Concrate.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Entities.Concrate.BankAccount", b =>
                {
                    b.Navigation("BankAccountCompanies");

                    b.Navigation("BankAccountPartners");
                });

            modelBuilder.Entity("Entities.Concrate.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Entities.Concrate.Company", b =>
                {
                    b.Navigation("BankAccountCompanies");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Entities.Concrate.Contact", b =>
                {
                    b.Navigation("ContactDetails");

                    b.Navigation("ContactPartners");

                    b.Navigation("ContactWarehouses");
                });

            modelBuilder.Entity("Entities.Concrate.Currency", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("LedgerEntries");

                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("Entities.Concrate.Ledger", b =>
                {
                    b.Navigation("LedgerEntries");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SaleInvoices");
                });

            modelBuilder.Entity("Entities.Concrate.Product", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPrices");

                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("SaleInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceExpenses");

                    b.Navigation("PurchaseInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.SaleInvoice", b =>
                {
                    b.Navigation("SaleInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.UnitOfMeasure", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("SaleInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.Vat", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("SaleInvoiceLines");
                });

            modelBuilder.Entity("Entities.Concrate.Warehouse", b =>
                {
                    b.Navigation("AddressWarehouses");

                    b.Navigation("ContactWarehouses");

                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("SaleInvoiceLines");
                });

            modelBuilder.Entity("Partner", b =>
                {
                    b.Navigation("AddressPartners");

                    b.Navigation("BankAccountPartners");

                    b.Navigation("ContactPartners");

                    b.Navigation("LedgerEntries");

                    b.Navigation("PurchaseInvoiceExpenses");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SaleInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
