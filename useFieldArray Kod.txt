<template>
  <form
    class="w-full min-h-screen mx-auto bg-white dark:bg-gray-900 space-y-6 px-4 py-6"
    @submit="onSubmit"
  >
    <!-- Başlık ve Kaydet -->
    <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-6">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Yeni Şirket Ekle</h1>
      <button
        type="submit"
        class="mt-4 md:mt-0 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-semibold rounded-lg text-sm px-6 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
      >
        Kaydet
      </button>
    </div>

    <!-- Şirket Bilgileri -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <FieldTextInput fieldName="name" labelName="Adı" placeholderName="Company Name" />
      <FieldTextInput fieldName="tradeName" labelName="Ticari Adı" placeholderName="Trade Name" />
      <FieldTextInput fieldName="uidNumber" labelName="UID Numarası" placeholderName="UID Number" />
      <FieldTextInput fieldName="vatNumber" labelName="KDV Numarası" placeholderName="VAT Number" />
      <FieldTextInput fieldName="period" labelName="Periyot" placeholderName="Period" />
    </div>

    <!-- Depo Bilgileri -->
    <div class="mt-12 space-y-12">
      <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Depolar</h2>
        <button
          type="button"
          @click="addWarehouse"
          class="mt-4 md:mt-0 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-semibold rounded-lg text-sm px-6 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
        >
          Yeni Depo Ekle
        </button>
      </div>

      <div
        v-for="(warehouse, wIndex) in warehouseFields"
        :key="warehouse.key"
        class="space-y-6 border border-gray-200 dark:border-gray-700 p-4 rounded-lg"
      >
        <div class="flex items-end gap-3">
          <div class="w-full">
            <FieldTextInput
              :fieldName="`warehouses[${wIndex}].name`"
              :labelName="`Depo Adı ${wIndex + 1}`"
              :placeholderName="`Depo Adı ${wIndex + 1}`"
            />
          </div>
          <button
            type="button"
            @click="removeWarehouse(wIndex)"
            class="mt-4 text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-semibold rounded-lg text-sm px-6 py-2.5 dark:bg-red-600 dark:hover:bg-red-700 focus:outline-none dark:focus:ring-red-800"
          >
            Sil
          </button>
        </div>

        <!-- Adres Listesi -->
        <div
          v-for="(address, aIndex) in getAddresses(wIndex)"
          :key="aIndex"
          class="grid grid-cols-1 md:grid-cols-5 gap-4 items-end"
        >
          <FieldTextInput
            :fieldName="`warehouses[${wIndex}].addresses[${aIndex}].street`"
            labelName="Sokak"
            placeholderName="Sokak"
          />
          <FieldTextInput
            :fieldName="`warehouses[${wIndex}].addresses[${aIndex}].type`"
            labelName="Adres Tipi"
            placeholderName="Ev, Ofis..."
          />
          <FieldTextInput
            :fieldName="`warehouses[${wIndex}].addresses[${aIndex}].city`"
            labelName="Şehir"
            placeholderName="İstanbul"
          />
          <FieldTextInput
            :fieldName="`warehouses[${wIndex}].addresses[${aIndex}].country`"
            labelName="Ülke"
            placeholderName="Türkiye"
          />
          <FieldTextInput
            :fieldName="`warehouses[${wIndex}].addresses[${aIndex}].zipCode`"
            labelName="Posta Kodu"
            placeholderName="34000"
          />

          <div class="col-span-full md:col-auto">
            <button
              type="button"
              @click="removeAddress(wIndex, aIndex)"
              class="text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-semibold rounded-lg text-sm px-6 py-2.5 dark:bg-red-600 dark:hover:bg-red-700 focus:outline-none dark:focus:ring-red-800"
            >
              Adresi Sil
            </button>
          </div>
        </div>

        <!-- Adres Ekle -->
        <button
          type="button"
          @click="addAddress(wIndex)"
          class="text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-300 font-semibold rounded-lg text-sm px-6 py-2.5 dark:bg-green-600 dark:hover:bg-green-700 focus:outline-none dark:focus:ring-green-800"
        >
          Adres Ekle
        </button>
      </div>
    </div>
  </form>
</template>


<script setup>
import { useForm, useFieldArray } from "vee-validate";
import FieldTextInput from "@/components/Form/FieldTextInput.vue";
import { useCompanyStore } from "@/stores/company.store";

const companyStore = useCompanyStore();

const { handleSubmit, values, setFieldValue } = useForm({
  initialValues: {
    name: "",
    tradeName: "",
    uidNumber: "",
    vatNumber: "",
    period: "",
    warehouses: [
      {
        name: "",
        addresses: [
          {
            street: "",
            type: "",
            city: "",
            country: "",
            zipCode: "",
          },
        ],
      },
    ],
  },
});

const {
  fields: warehouseFields,
  push: pushWarehouse,
  remove: removeWarehouse,
} = useFieldArray("warehouses");

// Adres dizisine güvenli erişim
const getAddresses = (warehouseIndex) =>
  values.warehouses[warehouseIndex]?.addresses ?? [];

// Yeni adres ekle
const addAddress = (warehouseIndex) => {
  const path = `warehouses[${warehouseIndex}].addresses`;
  const current = getAddresses(warehouseIndex);
  setFieldValue(path, [
    ...current,
    {
      street: "",
      type: "",
      city: "",
      country: "",
      zipCode: "",
    },
  ]);
};

// Adres sil
const removeAddress = (warehouseIndex, addressIndex) => {
  const path = `warehouses[${warehouseIndex}].addresses`;
  const current = getAddresses(warehouseIndex);
  const updated = [...current];
  updated.splice(addressIndex, 1);
  setFieldValue(path, updated);
};

// Yeni depo ekle
const addWarehouse = () => {
  pushWarehouse({
    name: "",
    addresses: [
      {
        street: "",
        type: "",
        city: "",
        country: "",
        zipCode: "",
      },
    ],
  });
};

// Form gönderildiğinde
const onSubmit = handleSubmit(async (formValues) => {
  await companyStore.createCompany(formValues);
});
</script>
